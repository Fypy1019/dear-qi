<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aynu.helomybatis_04_DynamicSQL.dao.EmployeeMapperDynamicSQL">
    <!--
        if:判断
        choose:(when+otherwise):分支选择；swtich-case
            如果带了id就用id查，如果带了lastName就用lastName查
        trim 字符串截取（where(封装查询条件),set（封装修改条件））
        foreach
    -->
    <!--查询员工，要求，携带了哪个字段查询条件就带上这个字段的值-->
    <!--public List<Employee> getEmpsByConditionIf(Employee employee);-->
    <select id="getEmpsByConditionIf" resultType="com.aynu.helomybatis_04_DynamicSQL.pojo.Employee">
        SELECT * FROM tbl_employee
        <where><!--where标签，对比where 1=1使用  -->
            <!-- test：判断表达式（OGNL）
             c:if test
             从参数中取值进行判断

             遇见特殊符号应该去写转义字符
             &&
             -->
            <if test="id!=null">
                id=#{id}
            </if>
            <!--<if test="lastName!=null and lastName!=''">
                或者用双引号转义字符
            -->
            <if test="lastName!=null and lastName!=&quot;&quot;">
                AND last_name LIKE #{lastName}
            </if>
            <if test="email!=null and email.trim()!=''">
                AND email=#{email}
            </if>
            <!--ognl会进行字符串与数字的转换判断，"0"==0 -->
            <if test="gender==0 or gender==1">
                AND gender=#{gender}
            </if>
        </where>
    </select>


    <!--public List<Employee> getEmpsByConditionTrim(Employee employee);-->
    <select id="getEmpsByConditionTrim" resultType="com.aynu.helomybatis_04_DynamicSQL.pojo.Employee">
        SELECT * FROM tbl_employee
        <!--后面多出的and或者or where标签不能解决
            trim标签：
                prefix=""：前缀，trim标签体中是整个字符串拼串后的结果。
                            prefix给拼串后的整个字符串加一个前缀（可写可不写）
                prefixOverrides=""：前缀覆盖：去掉整个字符串前面多余的字符
                suffix=""：后缀，给拼串后的整个字符串加一个前缀
                suffixOverrides=""：后缀覆盖，去掉整个字符串前面多余的字符
        -->
        <trim prefix="where" prefixOverrides="and" suffix="" suffixOverrides="and">
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null and lastName!=&quot;&quot;">
                AND last_name LIKE #{lastName} AND
            </if>
            <if test="email!=null and email.trim()!=''">
                email=#{email} AND
            </if>
            <if test="gender==0 or gender==1">
                gender=#{gender}
            </if>
        </trim>
    </select>

    <!--public List<Employee> getEmpsByConditionChoose(Employee employee);-->
    <select id="getEmpsByConditionChoose" resultType="com.aynu.helomybatis_04_DynamicSQL.pojo.Employee">
        SELECT * FROM tbl_employee
        <where>
            <!--如果带了id就用id查，如果带了lastName就用lastName查-->
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name LIKE #{lastName}
                </when>
                <when test="email!=null">
                    email=#{email}
                </when>
                <otherwise>
                    gender=0
                </otherwise>
            </choose>
        </where>
    </select>

    <!--public void updateEmp(Employee employee);-->
    <update id="updateEmp">
        <!--
        全体修改
        UPDATE tbl_employee
        SET last_name = #{lastName},email = #{email},gender=#{gender}
        WHERE id=#{id}
        -->
        UPDATE tbl_employee
        <set><!--逗号问题，trim标签也行-->
            <if test="lastName!=null">
                last_name = #{lastName},
            </if>
            <if test="email">
                email = #{email},
            </if>
            <if test="gender">
                gender = #{gender},
            </if>
        </set>
        <!--<trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null">
                last_name = #{lastName},
            </if>
            <if test="email">
                email = #{email},
            </if>
            <if test="gender">
                gender = #{gender},
            </if>
        </trim>-->
        WHERE id=#{id}
    </update>

    <!--public List<Employee> getEmpsByConditionForeach(List<Integer> ids);-->
    <select id="getEmpsByConditionForeach" resultType="com.aynu.helomybatis_04_DynamicSQL.pojo.Employee">
        SELECT * FROM tbl_employee WHERE id IN
        <!--
            collection:指定要遍历的集合；
                list类型的参数会特殊处理封装在map中，map的key就叫list
            item:将当前遍历出的元素赋值给指定的变量
            #{变量名}就能取出变量的值也就是当前遍历出的元素
            separator:每个元素之间的分隔符
            open:遍历出所有的结果拼接成一个开始的字符
            close:遍历出所有的结果拼接成一个结束的字符
            index:索引。遍历list的时候index是索引,item就是当前值
                   遍历map的时候index表示的就是map的key，item就是map的值

        -->
        <foreach collection="ids" item="item_id" separator="," open="(" close=")">
            #{item_id}
        </foreach>
    </select>
<!--foreach还可以用于批量保存-->

    <!--public void addEmps(@Param("emps")List<Employee> employees);-->
    <insert id="addEmps" parameterType="com.aynu.helomybatis_04_DynamicSQL.pojo.Employee">
        INSERT INTO tbl_employee(last_name,email,gender,d_id)
        <!--VALUES ('tom','tom@aynu.com','0',1),('frank','frank@aynu.com','1',2)      sql-->
        VALUES
        <foreach collection="list" item="employee" separator=",">
            (#{employee.lastName},#{employee.email},#{employee.gender},#{employee.dept.id})
        </foreach>
    </insert>
<!--mysql下的批量保存：可以使用foreach语句，mysql支持value(),(),()语法，多发几条sql语句，需要更改propertis配置 allowMultiQueries=true 这种分号分割多个sql可以用于其他的批量操作（删除、修改）-->
    <insert id="addMySQLEmps" parameterType="com.aynu.helomybatis_04_DynamicSQL.pojo.Employee">
        <foreach collection="list" item="employee" separator=";">
            INSERT INTO tbl_employee(last_name,email,gender,d_id) VALUES
            (#{employee.lastName},#{employee.email},#{employee.gender},#{employee.dept.id})
        </foreach>
    </insert>
</mapper>